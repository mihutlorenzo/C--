

/* ----------------------Preliminary Declarations Section--------------------*/ 

import java_cup.runtime.*;

/* Parser code so that it can interface with the scanner created with JFlex and change the way that it reports errors (include line and column number of the error).*/
parser code {:
  CMinusMinusLexer lexer;

  public parser(CMinusMinusLexer lexer) {
    this.lexer = lexer;
  }

  /* Change the method report_error so it will display the line
     and column of where the error occurred in the input as well as the reason
     for the error which is passed into the method in the String 'message'.  */
  public void report_error(String message, Object info) {

    /* Create a StringBuffer called 'm' with the string 'Error' in it. */
    StringBuffer m = new StringBuffer("Error");

    /* Check if the information passed to the method is the same type as the
       type java_cup.runtime.Symbol. */
    if (info instanceof java_cup.runtime.Symbol) {

      /* Declare a java_cup.runtime.Symbol object 's' with the information in the
          object info that is being typecasted as a java_cup.runtime.Symbol object. */
      java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

      /* Check if the line number in the input is greater or equal to zero. */
      if (s.left >= 0) {

        /* Add to the end of the StringBuffer error message the line number of
           the error in the input. */
        m.append(" in line "+(s.left+1));

        /* Check if the column number in the input is greater or equal to
           zero. */
        if (s.right >= 0)

          /* Add to the end of the StringBuffer error message the column number
             of the error in the input. */
          m.append(", column "+(s.right+1));
        }
    }

    /* Add to the end of the StringBuffer error message created in this
       method the message that was passed into this method. */
    m.append(" : "+message);

    /* Print the contents of the StringBuffer 'm', which contains an error
       message out on a line. */
    System.err.println(m);
  }

  /* Change the method report_fatal_error so when it reports a fatal error it
     will display the line and column number of where the fatal error
     occurred in the input as well as the reason for the fatal error which is
     passed into the method in the object 'message' and then exit.*/
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    System.exit(1);
    }
:}; 


/* Use the scanner created with JFlex  */
scan with {: return lexer.yylex(); :};


/* ------------Declaration of Terminals and Non Terminals Section----------- */

/* Terminals (tokens returned by the scanner).

   Terminals that have no value are listed first and then terminals that do
   have an value, in this case an integer value, are listed on the next line
   down. */
terminal O_NOT;
terminal O_SUB;
terminal O_ADD;
terminal O_MULT;
terminal O_DIV;
terminal O_BANG;
terminal O_OR;
terminal O_DEQL;
terminal O_DEQL;
terminal O_NOTEQL;
terminal O_LT;
terminal O_GT;
terminal O_GE;
terminal O_LE;
terminal O_RSHIFT;
terminal O_LSHIFt;
terminal O_EQL;
terminal O_SEMICOLON;
terminal O_COMA;
terminal K_INT;
terminal K_BOOL;
terminal K_TRUE;
terminal K_VOID;
terminal K_IF;
terminal K_ELSE;
terminal K_WHILE;
terminal K_RETURN;
terminal K_CIN;
terminal K_COUT;
terminal K_LPAREN;
terminal K_RPAREN;
terminal K_RPAREN;
terminal K_RSQBKT;
terminal K_LBRKT;
terminal K_RBRKT;
terminal IDENTIFIER;
terminal EOF;
terminal ENDLINE;
terminal WHITESPACE;x

terminal Integer Integer;
terminal String STRING;

/* Non Terminals used in the Grammar Section.

   Non Terminals that have an object value are listed first and then Non Terminals
   that have an integer value are listed.  An object value means that it can be
   any type, it isn't set to a specific type.  So it could be an integer or a String or
   whatever. */
non terminal Object     expr_list, expr_part;
non terminal Integer    expr, factor, term; 